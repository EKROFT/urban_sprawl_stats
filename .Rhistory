head(varespec[,1:6], n = 5)
head(varechem)
pca <- rda(decostand(varespec, method = "hellinger"), scale = TRUE)
pca
rda(decostand(varespec, method = "hellinger"), scale = FALSE)
#plot
biplot(pca, scaling = "symmetric")
#eigenvalues quantify the inertia(variance) explained by each axis
screeplot(pca, bstick = TRUE, type = "l",
main = NULL)
summary(eigenvals(pca))
setwd("~/")
#Part 1 - Diversity Metrics
data(BCI)
#the default index is Shannon's
H<-diversity(BCI)
head(H)
#for other ones, specify index
D1<-diversity(BCI, index="simpson")
head(D1)
D2<-diversity(BCI,index="invsimpson", base=2)
head(D2)
#species richness
head(specnumber(BCI))
head(rowSums(BCI>0))
#Pielou's evenness
J<-H/log(specnumber(BCI))
head(J)
#Renyi's entropy and Hill's number
R<-renyi(BCI, scales=2)
head(R)
N2<- renyi(BCI, scales = 2, hill = TRUE)
head(N2)
k<-sample(nrow(BCI),6)
R <- renyi(BCI[k,])
plot(R)
#Rarefaction
rs <- rowSums(BCI)
quantile(rs)
Srar <- rarefy(BCI, min(rs))
head(Srar)
rarecurve(BCI, sample = min(rs))
##Part 2 - Dissimilarity
data("varespec")
#vegdist computes dissimiliraity measures
#decostand computes standardizations (standardizing data)
euc_dij <- vegdist(varespec, method = "euclidean")
bc_dij <- vegdist(varespec)
hell_dij <- vegdist(decostand(varespec, method = "hellinger"),
method = "euclidean")
##Part 3 - Ordination (unconstrained)
#PCA
library(vegan)
data(varespec)
data(varechem)
class(varespec)
dim(varespec)#number of samples, species
head(varespec[,1:6], n = 5)
head(varechem)
#pca is fitted using rda
pca <- rda(decostand(varespec, method = "hellinger"), scale = TRUE)
pca
#if we do scale=False
rda(decostand(varespec, method = "hellinger"), scale = FALSE)
#plot
biplot(pca, scaling = "symmetric")
head(eigenvals(pca), 5)
#eigenvalues quantify the inertia(variance) explained by each axis
screeplot(pca, bstick = TRUE, type = "l",
main = NULL)
#a screeplot of the eigenvalues, looking for a drastic change in slope, where this happens
#it shows you where to start(in this case stop after PC2)
#where your eigenvalues remain above the broken stick, this should be included
summary(eigenvals(pca))
#Correspondance Analysis
#this is a weighted form of PCA
#te row and column sums are used as weights and this has the effect of
#urning the analysis into one of relative composition
#he weighting is a trick to get linear-based software to fit non-linear responses
#hese nonlinear response are assumed to unimodal Gaussian curves, all wit
#qual height and tolerance widths, and equally spaced optima
##Part 1 - Diversity Metrics
data(BCI)
#the default index is Shannon's
H<-diversity(BCI)
head(H)
#for other ones, specify index
D1<-diversity(BCI, index="simpson")
head(D1)
D2<-diversity(BCI,index="invsimpson", base=2)
head(D2)
#species richness
head(specnumber(BCI))
head(rowSums(BCI>0))
#Pielou's evenness
J<-H/log(specnumber(BCI))
head(J)
#Renyi's entropy and Hill's number
R<-renyi(BCI, scales=2)
head(R)
N2<- renyi(BCI, scales = 2, hill = TRUE)
head(N2)
k<-sample(nrow(BCI),6)
R <- renyi(BCI[k,])
plot(R)
#Rarefaction
rs <- rowSums(BCI)
quantile(rs)
Srar <- rarefy(BCI, min(rs))
head(Srar)
rarecurve(BCI, sample = min(rs))
##Part 2 - Dissimilarity
data("varespec")
#vegdist computes dissimiliraity measures
#decostand computes standardizations (standardizing data)
euc_dij <- vegdist(varespec, method = "euclidean")
bc_dij <- vegdist(varespec)
hell_dij <- vegdist(decostand(varespec, method = "hellinger"),
method = "euclidean")
##Part 3 - Ordination (unconstrained)
#PCA
library(vegan)
data(varespec)
data(varechem)
class(varespec)
dim(varespec)#number of samples, species
head(varespec[,1:6], n = 5)
head(varechem)
#pca is fitted using rda
pca <- rda(decostand(varespec, method = "hellinger"), scale = TRUE)
pca
#if we do scale=False
rda(decostand(varespec, method = "hellinger"), scale = FALSE)
#plot
biplot(pca, scaling = "symmetric")
head(eigenvals(pca), 5)
#eigenvalues quantify the inertia(variance) explained by each axis
screeplot(pca, bstick = TRUE, type = "l",
main = NULL)
#a screeplot of the eigenvalues, looking for a drastic change in slope, where this happens
#it shows you where to start(in this case stop after PC2)
#where your eigenvalues remain above the broken stick, this should be included
summary(eigenvals(pca))
spp <- allMyData[, 1:20] ## columns 1-20 contain the species data
env <- allMyData[, 21:26] ## columns 21-26 contain the environmental data
#Basic Ordination Plots
plot(ca1, choices = c(1,3),
scaling = "symmetric")
pco1 <- wcmdscale(vegdist(varespec), eig = TRUE)
round(eigenvals(pco1), 3)
pco2 <- wcmdscale(vegdist(varespec), eig = TRUE, add = "lingoes")
round(eigenvals(pco2), 3)
pco <- wcmdscale(vegdist(varespec), eig = TRUE)
plot(pco)
scrs <- scores(pco, choices = 1:2)
spp_scrs <- wascores(scrs, varespec,
expand = FALSE)
points(spp_scrs, col = "red", pch = 19)
data(dune)
set.seed(10)
(sol <- metaMDS(dune, trace = FALSE))
layout(matrix(1:2, ncol = 2))
plot(sol, main = "Dune NMDS plot"); stressplot(sol, main = "Shepard plot")
layout(1)
set.seed(10)
ordipointlabel(pca,
display = "sites",
scaling = "symmetric")
plot(pca, display = "sites",
scaling = "symmetric", type = "n")
points(pca, display = "sites",
scaling = "symmetric", pch = 19,
col = "#025196")
set.seed(10)
ordipointlabel(pca,
display = "sites",
scaling = "symmetric",
add = TRUE)
disp <- "species"
scl <- "symmetric"
plot(pca, display = disp,
scaling = scl, type = "n")
points(pca, display = disp,
scaling = scl, pch = 19,
col = "#025196")
set.seed(10)
ordipointlabel(pca,
display = disp,
scaling = scl,
add = TRUE)
disp <- c("sites", "species")
scl <- "symmetric"
plot(pca, display = disp,
scaling = scl, type = "n")
points(pca, display = disp[1],
scaling = scl, pch = 19,
col = "#025196")
points(pca, display = disp[2],
scaling = scl, pch = 19,
col = "#fdb338")
set.seed(10)
ordipointlabel(pca,
display = disp,
scaling = scl,
add = TRUE,
col = c(1,1), cex = c(0.7, 0.7))
data(dune, dune.env)
col_vec <- c("red", "blue", "orange", "grey")
disp <- "sites"
scl <- "symmetric"
ord <- rda(decostand(dune, method="hellinger"))
plot(ord, type = "n", scaling = scl,
display = disp)
cols <- with(dune.env, col_vec[Management])
points(ord, display = disp, scaling = scl,
pch = 19, col = cols, cex = 2)
lvl <- with(dune.env, levels(Management))
legend("topright", legend = lvl,
bty = "n", col = col_vec, pch = 19)
disp <- "sites"
scl <- "symmetric"
plot(ord, type = "n", scaling = scl,
display = disp)
ordihull(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, lwd = 2)
ordispider(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, label = TRUE)
points(ord, display = disp, scaling = scl,
pch = 21, col = "red", bg = "yellow")
disp <- "sites"
scl <- "symmetric"
plot(ord, type = "n", scaling = scl,
display = disp)
## ellipsoid hull
ordiellipse(ord, groups = dune.env$Management,
kind = "ehull", col = col_vec,
scaling = scl, lwd = 2)
## standard error of centroid  ellipse
ordiellipse(ord, groups = dune.env$Management,
draw = "polygon", col = col_vec,
scaling = scl, lwd = 2)
ordispider(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, label = TRUE)
points(ord, display = disp, scaling = scl,
pch = 21, col = "red", bg = "yellow")
mcycle <- MASS::mcycle
head(mcycle)
plot(mcycle)
lm_mod<-lm(times~accel, data=mcycle)
termplot(lm_mod, partial.resid = TRUE, se = TRUE)
install.packages("mgcv")
library(mgcv)
gam_mod <- gam(accel~ s(times), data = mcycle)
plot(gam_mod, residuals = TRUE, pch = 1)
coef(gam_mod)
# Fit a GAM with 3 basis functions
gam_mod_k3 <- gam(accel ~ s(times, k = 3), data = mcycle)
gam_mod_k20<-gam(accel~s(times, k=20), data=mcycle)
par(mfrow = c(1, 2))
plot(gam_mod_k3, residuals = TRUE, pch = 1)
plot(gam_mod_k20, residuals = TRUE, pch = 1)
gam_mod <- gam(accel ~ s(times), data = mcycle, method = "REML")
gam_mod$sp
gam_mod_s1 <- gam(accel ~ s(times), data = mcycle, sp = 0.1)
gam_mod_s2 <- gam(accel ~ s(times), data = mcycle, sp = 0.0001)
plot(gam_mod_s1, residuals = TRUE, pch = 1)
plot(gam_mod_s2, residuals = TRUE, pch = 1)
gam_mod_sk<-gam(accel~s(times, k=50), data=mcycle, sp=0.0001)
plot(gam_mod_sk, residuals=TRUE, pch=1)
##multiple regression gams
library(gamair)
data("mpg", package="gamair")
head(mpg)
mod_city<-gam(city.mpg~s(weight)+s(length)+s(price), data=mpg, method="REML")
plot(mod_city, pages = 1)
plot(mod_city, pages = 2)
plot(mod_city)
plot(mod_city, pages=3)
mod_city2 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + fuel+ drive+ style,
data = mpg, method = "REML")
plot(mod_city2, all.terms = TRUE, pages = 1)
plot(mod_city2, all.terms = TRUE, pages = 3)
plot(mod_city2, all.terms = TRUE, pages = 6)
mod_city3 <- gam(city.mpg ~ s(weight, by = drive) + s(length, by = drive) + s(price, by = drive) + drive,
data = mpg, method = "REML")
plot(mod_city3, pages = 6)
library(gamair)
data("mpg", package="gamair")
library(mgcv)
mod_city4 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + s(rpm) + s(width),
data = mpg, method = "REML")
summary(mod_city4)
mod <- gam(accel ~ s(times), data = mcycle, method = "REML")
plot(mod, residuals=TRUE)
plot(mod, residuals=TRUE, pch=1, cex=1)
plot(mod, select=3)
mod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio,
data = mpg, method = "REML")
plot(mod, select=3)
plot(mod, pages = 1, all.terms = TRUE)
plot(mod, pages = 5, all.terms = TRUE)
plot(mod, select=1, shade=TRUE, shade.col="hotpink")
plot(mod, select=1, shade=TRUE, shade.col="hotpink", pages=3)
# Make another plot adding the intercept value and uncertainty
plot(mod, select = 1, shade = TRUE, shade.col = "hotpink",
shift = coef(mod)[1], seWithMean = TRUE)
# Make another plot adding the intercept value and uncertainty
plot(mod, select = 1, shade = TRUE, shade.col = "hotpink",
shift = coef(mod)[1], seWithMean = TRUE, pages=3)
set.seed(0)
dat <- gamSim(1,n=200)
mod <- gam(y ~ s(x0, k = 5) + s(x1, k = 5) + s(x2, k = 5) + s(x3, k = 5),
data = dat, method = "REML")
gam.check(mod)
gam.check(mod, pages=4)
gam.check(mod)
set.seed(0)
dat <- mgcv::gamSim(1,n=600, scale=0.6, verbose=FALSE)
mod <- gam(y ~ s(x0, k = 3) + s(x1, k = 3) + s(x2, k = 3) + s(x3, k = 3),
data = dat, method = "REML")
gam.check(mod)
mod2 <- gam(y ~ s(x0, k =2) + s(x1, k = 2) + s(x2, k = 4) + s(x3, k =2),
data = dat, method = "REML")
mod2 <- gam(y ~ s(x0, k =3) + s(x1, k = 3) + s(x2, k = 10) + s(x3, k =3),
data = dat, method = "REML")
check(mod2)
gam.check(mod2)
data("mpg", package="gamair", verbose=FALSE)
set.seed(0)
data("mpg", package="gamair", verbose=FALSE)
mod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight),
data = mpg, method = "REML")
concurvity(mod, full = TRUE)
set.seed(0)
data("mpg", package="gamair", verbose=FALSE)
mod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight),
data = mpg, method = "REML")
concurvity(mod, full=FALSE)
setwd("~/Masters/Maps and Data/urban_sprawl_stats")
no2.data<-read.csv("Data/shortlist_data_0813.csv")
##Testing GAM models
library(mgcv)
no2.gam<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+s(Imp.)+s(petrochem_distance)+
s(road.distance..meters.)+s(Road.), data=no2.data, method="REML")
summary(no2.gam)
gam.check(no2.gam)
no2.gam2<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Imp.)+s(petrochem_distance)+s(Income)+
s(road.distance..meters.)+s(Road.)+ti(petrochem_distance, Income), data=no2.data, method="REML")
summary(no2.gam2)
#interaction term not very significant
no2.gam3<-gam(NO2_mean~s(BD)+s(X.canopy)+s (Imp.)+s(petrochem_distance)+s(Income)+
s(road.distance..meters.)+s(Road.)+
ti(X.canopy, Imp.), data=no2.data, method="REML")
summary(no2.gam3)
#interaction between imp. and canopy seems less important
anova(no2.gam,no2.gam2,no2.gam3, test="Chisq")
anova(no2.gam, no2.gam2, test="Chisq")
anova(no2.gam, no2.gam3, test="Chisq")
#appears that model with no interactions is best so far.
##trying removing variables
no2.gam4<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+s(Imp.)+s(petrochem_distance)+
s(Road.), data=no2.data, method="REML")
summary(no2.gam4)
anova(no2.gam, no2.gam4, test="Chisq")
#simpler model is better (removed distance to road)
no2.gam5<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+s(Imp.)+s(petrochem_distance)+
s(road.distance..meters.), data=no2.data, method="REML")
anova(no2.gam,no2.gam4, no2.gam5, test="Chisq")
anova(no2.gam, no2.gam4, test="Chisq")
anova(no2.gam, no2.gam5, test="Chisq")
#model no2.gam4 is better than model 0 or model 5
no2.gam6<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+s(petrochem_distance)+
s(Road.), data=no2.data, method="REML")
anova(no2.gam,no2.gam4, no2.gam6, test="Chisq")
anova(no2.gam4, no2.gam6, test="Chisq")
#model that includes imp. seems stronger
no2.gam7<-gam(NO2_mean~s(BD)+s(Income)+s(Imp.)+s(petrochem_distance)+
s(Road.), data=no2.data, method="REML")
anova(no2.gam, no2.gam4, no2.gam7, test="Chisq")
anova(no2.gam4, no2.gam7, test="Chisq")
#model including canopy cover seems stronger
#no2.gam4 seems to be the winner so far
gam.check(no2.gam4)
concurvity(no2.gam4, full=TRUE)
#Impervious cover, BD and canopy cover may have concurvity
concurvity(no2.gam4, full=FALSE)
#Impervious seems concurvious with other variables.
gam.check(no2.gam6)
concurvity(no2.gam6, full=TRUE)
#this model gets rid of the concurvity
anova(no2.gam4, no2.gam6, test="Chisq")
#these models seem to be almost the same so the one without concurvity is probably better (6)
vis.gam(no2.gam6, view=c("petrochem_distance", "Income"), color="heat", plot.type="persp",
theta=140)
library(nlme)
library(gstat)
library(sp)
library(ape)
##checking for spatial autocorrelation
no2.modelspace<-gam(NO2_mean~s(BD)+s(X.canopy)+s(petrochem_distance)+
s(Road.), data=no2.data, method="REML")
coordinates(no2.data)<-c('Long','Lat')
resids<-residuals(no2.modelspace)
no2.data$resids=resids
bubble(no2.data,zcol='resids')
V<-variogram(resids~1, data=no2.data)
plot(V, pch=16, col="black")
#looks like definite spatial autocorrelation
test.dists <- as.matrix(dist(cbind(no2.data$Long, no2.data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(no2.data$resids, test.dists.inv)
#Moran's I seems to confirm this
#will have to account for spatial autocorrelation in the model
coords<-coordinates(no2.data)
no2.gam8<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+s(petrochem_distance)+
s(Road.)+s(Lat,Long), data=no2.data, method="REML")
summary(no2.gam8)
gam.check(no2.gam8)
concurvity(no2.gam8)
#distance and coords have high concurvity
no2.gam9<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+
s(Road.)+s(Lat,Long), data=no2.data, method="REML")
summary(no2.gam9)
gam.check(no2.gam9)
concurvity(no2.gam9)
#this model gets rid of concurvity
anova(no2.gam9, no2.gam8, test="Chisq")
AIC(no2.gam9)
AIC(no2.gam8)
AIC(no2.gam6)
##model 8 and 9 are very similar. Perhaps I should pick the one without concurvity(9)
#that being said, I need to adjust k values on that model
no2.gam10<-gam(NO2_mean~s(BD)+s(X.canopy)+s(Income)+
s(Road.)+s(Lat,Long, k=67), data=no2.data, method="REML")
gam.check(no2.gam10)
#diagnostic plot for normality doesn't look great
summary(no2.gam10)
plot(no2.gam10)
gam.check(no2.gam10)
par(mfrow(c(2,2)))
par(mfrow(2,2))
par(mfrow=c(2,2))
gam.check(no2.gam10)
lst.data<-read.csv("Data/shortlist_data_0813.csv")
lst.model<-lm(LST_mean~BD+X.canopy+Income+river.distance..meters.+Imp., data=lst.data)
summary(lst.model)
library(car)
vif(lst.model)
#canopy cover and impervious seem a little correlated, same with BD and impervious
#I'm testing a model that removes impervious cover for that reason
lst.model2<-lm(LST_mean~BD+X.canopy+Income+river.distance..meters., data=lst.data)
summary(lst.model2)
vif(lst.model2)
#I want to test if the simpler model was better
anova(lst.model,lst.model2)
#looks like more complex model is better
#since the vif showed nothing above 5 for first model, I will keep impervious
##checking model assumptions
plot(lst.model, which=2)
plot(lst.model, which=3)
#diagnostics don't look awesome
##now testing models with interactions
lst.model5<-lm(LST_mean~BD+(X.canopy*Imp.)+Income+river.distance..meters., data=lst.data)
summary(lst.model5)
#canopy:imp. interaction has p values close to 1
lst.model6<-lm(LST_mean~(BD*X.canopy)+Imp.+Income+river.distance..meters., data=lst.data)
summary(lst.model6)
#this BD-canopy cover interaction has a very high p value
anova(lst.model, lst.model6)
#model without interaction term is stronger
library(nlme)
library(gstat)
library(sp)
lst.model4<-lm(LST_mean~BD+X.canopy+river.distance..meters.+Imp., data=lst.data)
coordinates(lst.data)<-c('Long','Lat')
resids<-residuals(lst.model4)
lst.data$resids=resids
bubble(lst.data,zcol='resids')
V<-variogram(resids~1, data=lst.data)
plot(V, pch=16, col="black")
#variogram doesn't show much spatial sutocorrelation, but still a little
test.dists <- as.matrix(dist(cbind(lst.data$Long, lst.data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
library(ape)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(lst.data$resids, test.dists.inv)
#Moran's I seems to indicate that there is spatial autocorrelation in the model residuals
#Model assumptions of independent observations not being met, need to account for this
coords<-coordinates(lst.data)
lst.model7<-lm(LST_mean~Lat*Long+BD+X.canopy+Income+
river.distance..meters.+Imp., data=lst.data)
summary(lst.model7)
anova(lst.model, lst.model7, test="Chisq")
AIC(lst.model)
AIC(lst.model7)
#model with spatial term is stronger
plot(lst.model7, which=2)
plot(lst.model7, which=3)
#not looking normally distributed
plot(lst.model7, which=2)
par(mfrow=c(1,1))
plot(lst.model7, which=2)
plot(lst.model7, which=3)
plot(lst.model7)
