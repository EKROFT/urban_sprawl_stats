#vegdist computes dissimiliraity measures
#decostand computes standardizations (standardizing data)
euc_dij <- vegdist(varespec, method = "euclidean")
bc_dij <- vegdist(varespec)
hell_dij <- vegdist(decostand(varespec, method = "hellinger"),
method = "euclidean")
##Part 3 - Ordination (unconstrained)
#PCA
library(vegan)
data(varespec)
data(varechem)
class(varespec)
dim(varespec)#number of samples, species
head(varespec[,1:6], n = 5)
head(varechem)
#pca is fitted using rda
pca <- rda(decostand(varespec, method = "hellinger"), scale = TRUE)
pca
#if we do scale=False
rda(decostand(varespec, method = "hellinger"), scale = FALSE)
#plot
biplot(pca, scaling = "symmetric")
head(eigenvals(pca), 5)
#eigenvalues quantify the inertia(variance) explained by each axis
screeplot(pca, bstick = TRUE, type = "l",
main = NULL)
#a screeplot of the eigenvalues, looking for a drastic change in slope, where this happens
#it shows you where to start(in this case stop after PC2)
#where your eigenvalues remain above the broken stick, this should be included
summary(eigenvals(pca))
spp <- allMyData[, 1:20] ## columns 1-20 contain the species data
env <- allMyData[, 21:26] ## columns 21-26 contain the environmental data
#Basic Ordination Plots
plot(ca1, choices = c(1,3),
scaling = "symmetric")
pco1 <- wcmdscale(vegdist(varespec), eig = TRUE)
round(eigenvals(pco1), 3)
pco2 <- wcmdscale(vegdist(varespec), eig = TRUE, add = "lingoes")
round(eigenvals(pco2), 3)
pco <- wcmdscale(vegdist(varespec), eig = TRUE)
plot(pco)
scrs <- scores(pco, choices = 1:2)
spp_scrs <- wascores(scrs, varespec,
expand = FALSE)
points(spp_scrs, col = "red", pch = 19)
data(dune)
set.seed(10)
(sol <- metaMDS(dune, trace = FALSE))
layout(matrix(1:2, ncol = 2))
plot(sol, main = "Dune NMDS plot"); stressplot(sol, main = "Shepard plot")
layout(1)
set.seed(10)
ordipointlabel(pca,
display = "sites",
scaling = "symmetric")
plot(pca, display = "sites",
scaling = "symmetric", type = "n")
points(pca, display = "sites",
scaling = "symmetric", pch = 19,
col = "#025196")
set.seed(10)
ordipointlabel(pca,
display = "sites",
scaling = "symmetric",
add = TRUE)
disp <- "species"
scl <- "symmetric"
plot(pca, display = disp,
scaling = scl, type = "n")
points(pca, display = disp,
scaling = scl, pch = 19,
col = "#025196")
set.seed(10)
ordipointlabel(pca,
display = disp,
scaling = scl,
add = TRUE)
disp <- c("sites", "species")
scl <- "symmetric"
plot(pca, display = disp,
scaling = scl, type = "n")
points(pca, display = disp[1],
scaling = scl, pch = 19,
col = "#025196")
points(pca, display = disp[2],
scaling = scl, pch = 19,
col = "#fdb338")
set.seed(10)
ordipointlabel(pca,
display = disp,
scaling = scl,
add = TRUE,
col = c(1,1), cex = c(0.7, 0.7))
data(dune, dune.env)
col_vec <- c("red", "blue", "orange", "grey")
disp <- "sites"
scl <- "symmetric"
ord <- rda(decostand(dune, method="hellinger"))
plot(ord, type = "n", scaling = scl,
display = disp)
cols <- with(dune.env, col_vec[Management])
points(ord, display = disp, scaling = scl,
pch = 19, col = cols, cex = 2)
lvl <- with(dune.env, levels(Management))
legend("topright", legend = lvl,
bty = "n", col = col_vec, pch = 19)
disp <- "sites"
scl <- "symmetric"
plot(ord, type = "n", scaling = scl,
display = disp)
ordihull(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, lwd = 2)
ordispider(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, label = TRUE)
points(ord, display = disp, scaling = scl,
pch = 21, col = "red", bg = "yellow")
disp <- "sites"
scl <- "symmetric"
plot(ord, type = "n", scaling = scl,
display = disp)
## ellipsoid hull
ordiellipse(ord, groups = dune.env$Management,
kind = "ehull", col = col_vec,
scaling = scl, lwd = 2)
## standard error of centroid  ellipse
ordiellipse(ord, groups = dune.env$Management,
draw = "polygon", col = col_vec,
scaling = scl, lwd = 2)
ordispider(ord, groups = dune.env$Management,
col = col_vec,
scaling = scl, label = TRUE)
points(ord, display = disp, scaling = scl,
pch = 21, col = "red", bg = "yellow")
mcycle <- MASS::mcycle
head(mcycle)
plot(mcycle)
lm_mod<-lm(times~accel, data=mcycle)
termplot(lm_mod, partial.resid = TRUE, se = TRUE)
install.packages("mgcv")
library(mgcv)
gam_mod <- gam(accel~ s(times), data = mcycle)
plot(gam_mod, residuals = TRUE, pch = 1)
coef(gam_mod)
# Fit a GAM with 3 basis functions
gam_mod_k3 <- gam(accel ~ s(times, k = 3), data = mcycle)
gam_mod_k20<-gam(accel~s(times, k=20), data=mcycle)
par(mfrow = c(1, 2))
plot(gam_mod_k3, residuals = TRUE, pch = 1)
plot(gam_mod_k20, residuals = TRUE, pch = 1)
gam_mod <- gam(accel ~ s(times), data = mcycle, method = "REML")
gam_mod$sp
gam_mod_s1 <- gam(accel ~ s(times), data = mcycle, sp = 0.1)
gam_mod_s2 <- gam(accel ~ s(times), data = mcycle, sp = 0.0001)
plot(gam_mod_s1, residuals = TRUE, pch = 1)
plot(gam_mod_s2, residuals = TRUE, pch = 1)
gam_mod_sk<-gam(accel~s(times, k=50), data=mcycle, sp=0.0001)
plot(gam_mod_sk, residuals=TRUE, pch=1)
##multiple regression gams
library(gamair)
data("mpg", package="gamair")
head(mpg)
mod_city<-gam(city.mpg~s(weight)+s(length)+s(price), data=mpg, method="REML")
plot(mod_city, pages = 1)
plot(mod_city, pages = 2)
plot(mod_city)
plot(mod_city, pages=3)
mod_city2 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + fuel+ drive+ style,
data = mpg, method = "REML")
plot(mod_city2, all.terms = TRUE, pages = 1)
plot(mod_city2, all.terms = TRUE, pages = 3)
plot(mod_city2, all.terms = TRUE, pages = 6)
mod_city3 <- gam(city.mpg ~ s(weight, by = drive) + s(length, by = drive) + s(price, by = drive) + drive,
data = mpg, method = "REML")
plot(mod_city3, pages = 6)
library(gamair)
data("mpg", package="gamair")
library(mgcv)
mod_city4 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + s(rpm) + s(width),
data = mpg, method = "REML")
summary(mod_city4)
mod <- gam(accel ~ s(times), data = mcycle, method = "REML")
plot(mod, residuals=TRUE)
plot(mod, residuals=TRUE, pch=1, cex=1)
plot(mod, select=3)
mod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio,
data = mpg, method = "REML")
plot(mod, select=3)
plot(mod, pages = 1, all.terms = TRUE)
plot(mod, pages = 5, all.terms = TRUE)
plot(mod, select=1, shade=TRUE, shade.col="hotpink")
plot(mod, select=1, shade=TRUE, shade.col="hotpink", pages=3)
# Make another plot adding the intercept value and uncertainty
plot(mod, select = 1, shade = TRUE, shade.col = "hotpink",
shift = coef(mod)[1], seWithMean = TRUE)
# Make another plot adding the intercept value and uncertainty
plot(mod, select = 1, shade = TRUE, shade.col = "hotpink",
shift = coef(mod)[1], seWithMean = TRUE, pages=3)
set.seed(0)
dat <- gamSim(1,n=200)
mod <- gam(y ~ s(x0, k = 5) + s(x1, k = 5) + s(x2, k = 5) + s(x3, k = 5),
data = dat, method = "REML")
gam.check(mod)
gam.check(mod, pages=4)
gam.check(mod)
set.seed(0)
dat <- mgcv::gamSim(1,n=600, scale=0.6, verbose=FALSE)
mod <- gam(y ~ s(x0, k = 3) + s(x1, k = 3) + s(x2, k = 3) + s(x3, k = 3),
data = dat, method = "REML")
gam.check(mod)
mod2 <- gam(y ~ s(x0, k =2) + s(x1, k = 2) + s(x2, k = 4) + s(x3, k =2),
data = dat, method = "REML")
mod2 <- gam(y ~ s(x0, k =3) + s(x1, k = 3) + s(x2, k = 10) + s(x3, k =3),
data = dat, method = "REML")
check(mod2)
gam.check(mod2)
data("mpg", package="gamair", verbose=FALSE)
set.seed(0)
data("mpg", package="gamair", verbose=FALSE)
mod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight),
data = mpg, method = "REML")
concurvity(mod, full = TRUE)
set.seed(0)
data("mpg", package="gamair", verbose=FALSE)
mod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight),
data = mpg, method = "REML")
concurvity(mod, full=FALSE)
setwd("~/Masters/Maps and Data/urban_sprawl_stats")
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
data<-read.csv("Data/Study_Site_coords.csv")
library(gstat)
library(sp)
######LST#####################
#set up variogram
breaks = seq(0, 1.5, l = 2)
coordinates(data)= ~ Lat+Long
bubble(data, zcol='LST_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(LST_mean~1, data=data)
plot(TheVariogram, pch=16, col="navy")
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
####NO2###################
#set up variogram
breaks = seq(0, 1.5, l = 2)
bubble(data, zcol='NO2_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(NO2_mean~1, data=data)
plot(TheVariogram, pch=16, col="forestgreen")
TheVariogram
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
install.packages("ape")
library(ape)
Moran.I(data$NO2_mean, test.dists.inv)
Moran.I(data$NO2_mean, test.dists.inv)
Moran.I(data$LST_mean, test.dists.inv)
##Moran's I
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
Moran.I(data$NO2_mean, test.dists.inv)
resids<-resid(data$NO2_mean)
resids<-resid(data$LST_mean)
resids<-residuals(data$LST_mean)
resids<-residuals(LST_mean, data=data)
resids<-residuals(NO2_mean, data=data)
data<-read.csv("Data/shortlist_data_0727.csv")
data2<-read.csv("Data/compiled_data_0727.csv")
LST.model<-lm(data$LST_mean~data$X.canopy+data$Imp.+data$BD+data$Income+data$river.distance..meters.)
residuals(LST.model)
resids<-residuals(LST.model)
TheVariogram2=variogram(resids~1, data=data)
TheVariogram2=variogram(resids~1)
TheVariogram2=variogram(resids~1, data=resids)
##Moran's I
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data$NO2_mean, test.dists.inv)
TheVariogram2=variogram(resids~1, data=resids)
##read in data and packages
data<-read.csv("Data/Study_Site_coords.csv")
frame<-as.data.frame("resids"=resids, "Lat"=data$Lat,"Long"=data$Long)
TheVariogram2=variogram(LST.model, locations=~data$Lat+data$Long)
coordinates(data)= ~ Lat+Long
TheVariogram2=variogram(LST.model)
TheVariogram2=variogram(LST.model, locations=coordinates(data)= ~ Lat+Long)
TheVariogram2=variogram(LST.model, locations(coordinates(data)= ~ Lat+Long))
TheVariogram2<-variogram(LST.model, locations(coordinates(data)= ~ Lat+Long))
TheVariogram2<-variogram(LST.model, locations(coordinates ~ data$Lat+data$Long))
TheVariogram2<-variogram(LST.model, locations(~ data$Lat+data$Long))
?variogram
TheVariogram2<-variogram.formula(LST.model)
TheVariogram2<-variogramST(LST.model, ~data$Lat+data$Long)
##Moran's I
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
#install.packages("ape")
library(ape)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data$LST_mean, test.dists.inv)
##Moran's I
test.dists <- as.matrix(dist(cbind(data$Long, data$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
#install.packages("ape")
library(ape)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data$NO2_mean, test.dists.inv)
location<-coordinates(data)= ~ Lat+Long
loc<-coordinates(data)= ~ Lat+Long
coordinates(data)= ~ Lat+Long
TheVariogram2<-variogramST(LST.model)
TheVariogram2<-variogramST(LST.model, locations=`coordinates<-`(data$LST_mean))
`coordinates<-`(data$LST_mean)
coordinates(data$LST_mean)
##read in data and packages
data.k<-read.csv("Data/Study_Site_coords.csv")
library(gstat)
library(sp)
#set up variogram
breaks = seq(0, 1.5, l = 2)
#set up variogram
breaks = seq(0, 1.5, l = 2)
coordinates(data)= ~ Lat+Long
bubble(data.k, zcol='LST_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#set up variogram
breaks = seq(0, 1.5, l = 2)
coordinates(data.k)= ~ Lat+Long
bubble(data.k, zcol='LST_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(LST_mean~1, data=data.k)
plot(TheVariogram, pch=16, col="navy")
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
#set up variogram
breaks = seq(0, 1.5, l = 2)
bubble(data.k, zcol='NO2_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(NO2_mean~1, data=data.k)
plot(TheVariogram, pch=16, col="forestgreen")
TheVariogram
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
##Moran's I
test.dists <- as.matrix(dist(cbind(data.k$Long, data.k$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
#install.packages("ape")
library(ape)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data.k$NO2_mean, test.dists.inv)
#modelling residuals
LST.model<-lm(data$LST_mean~data$X.canopy+data$Imp.+data$BD+data$Income+data$river.distance..meters.)
data<-read.csv("Data/shortlist_data_0727.csv")
#modelling residuals
LST.model<-lm(data$LST_mean~data$X.canopy+data$Imp.+data$BD+data$Income+data$river.distance..meters.)
summary(LST.model)
resids<-residuals(LST.model)
var<-variogram(LST.model, locations=coordinates(data.k)~Lat+Long)
var<-variogram(LST.model, locations=coordinates(data.k))
library(nlme)
Variogram(LST.model)
Variogram(LST.model, distance=coordinates(data.k)= ~ Lat+Long)
Variogram(LST.model, distance=coordinates)
Variogram(LST.model, distance=coordinates(data.k))
Variogram(LST.model, distance=~1)
Variogram(LST.model, distance=data.k)
View(data.k)
View(data.k)
##read in data and packages
dataset<-read.csv("Data/Study_Site_coords.csv")
coordinates(dataset)= ~ Lat+Long
View(dataset)
Variogram(LST.model, distance=dataset$LST_mean)
Variogram(LST.model, distance=data$LST_mean)
breaks = seq(0, 1.5, l = 2)
coordinates(dataset)= ~ Lat+Long
View(dataset)
bubble(dataset, zcol='LST_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
TheVariogram=variogram(LST_mean~1, data=dataset)
plot(TheVariogram, pch=16, col="navy")
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
breaks = seq(0, 1.5, l = 2)
bubble(dataset, zcol='NO2_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
TheVariogram=variogram(NO2_mean~1, data=dataset)
plot(TheVariogram, pch=16, col="forestgreen")
TheVariogram
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
##Moran's I
test.dists <- as.matrix(dist(cbind(dataset$Long, datasetLat)))
##Moran's I
test.dists <- as.matrix(dist(cbind(dataset$Long, dataset$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data.k$NO2_mean, test.dists.inv)
#modelling residuals
LST.model<-lm(data$LST_mean~data$X.canopy+data$Imp.+data$BD+data$Income+data$river.distance..meters.)
var<-variogram(LST.model, locations=coordinates(data.k))
library(nlme)
Variogram(LST.model, distance=data$LST_mean)
Variogram(LST.model, distance=dataset$Lat+dataset$Long)
Variogram(LST.model, distance=coordinates(dataset$Lat+dataset$Long))
coord<-coordinates(dataset)= ~ Lat+Long
coordinates(dataset)= ~ Lat+Long
coordinates(LST.model)~dataset$Lat+dataset$Long
Variogram(LST.model)
Variogram(LST.model, ~1)
Variogram(LST.model, coordinates(LST.model)~dataset$Lat+dataset$Long)
bubble(LST.model, fill=TRUE, do.sqrt=FALSE, maxsize=3)
##read in data and packages
dataset<-read.csv("Data/shortlist_data_0813.csv")
coordinates(dataset)= ~ Lat+Long
bubble(dataset, zcol='LST_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(LST_mean~1, data=dataset)
plot(TheVariogram, pch=16, col="navy")
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
#set up variogram
breaks = seq(0, 1.5, l = 2)
bubble(dataset, zcol='NO2_mean', fill=TRUE, do.sqrt=FALSE, maxsize=3)
#plot variogram
TheVariogram=variogram(NO2_mean~1, data=dataset)
plot(TheVariogram, pch=16, col="forestgreen")
#make variogram model
TheVariogramModel <- fit.variogram(TheVariogram, vgm("Exp"))
plot(TheVariogram, model=TheVariogramModel)
##Moran's I
test.dists <- as.matrix(dist(cbind(dataset$Long, dataset$Lat)))
test.dists.inv <- 1/test.dists
diag(test.dists.inv) <- 0
test.dists.inv[1:5, 1:5]
#install.packages("ape")
library(ape)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(data.k$NO2_mean, test.dists.inv)
test.dists.inv[is.infinite(test.dists.inv)] <- 0
Moran.I(dataset$NO2_mean, test.dists.inv)
#modelling residuals
LST.model<-lm(data$LST_mean~data$X.canopy+data$Imp.+data$BD+data$Income+data$river.distance..meters.)
summary(LST.model)
resids<-residuals(LST.model)
var<-variogram(LST.model, locations=coordinates(data.k))
library(nlme)
bubble(LST.model, fill=TRUE, do.sqrt=FALSE, maxsize=3)
Variogram(LST.model)
coordinates(LST.model)~dataset$Lat+dataset$Long
#modelling residuals
LST.model<-lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+dataset$BD+dataset$Income+dataset$river.distance..meters.)
bubble(LST.model, fill=TRUE, do.sqrt=FALSE, maxsize=3)
coordinates(LST.model)[1:5,]
coordinates(dataset)[1:5,]
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income+dataset$river.distance..meters.))
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income+dataset$river.distance..meters.)~1)
var<-variogram(lm(LST_mean~X.canopy+Imp.+
BD+Income+river.distance..meters.)~1, dataset)
var<-variogram(lm(LST_mean~X.canopy)~1, dataset)
var<-variogram(LST_mean~1, dataset)
plot(var)
var<-variogram(resids~1, dataset)
?variogram
var<-variogram(LST.model~1)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income+dataset$river.distance..meters.))
var<-variogram(lm(LST_mean~X.canopy+Imp.+
BD+Income+river.distance..meters.), locations~Lat+Long, data=dataset)
var<-variogram(lm(LST_mean~X.canopy+Imp.+
BD+Income+river.distance..meters.), locations~Lat+Long, data=dataset)
var<-variogram(lm(LST_mean~X.canopy+Imp.+
BD+Income+river.distance..meters.), locations~Lat+Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~X.canopy+Imp.+
BD+Income+river.distance..meters.), locations~Lat+Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+Income+river.distance..meters.), locations~Lat+Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income
+dataset$river.distance..meters.), locations~dataset$Lat+dataset$Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income
+dataset$river.distance..meters.), locations=~dataset$Lat+dataset$Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income
+dataset$river.distance..meters.), ~dataset$Lat+dataset$Long, data=dataset)
var<-variogram(lm(dataset$LST_mean~dataset$X.canopy+dataset$Imp.+
dataset$BD+dataset$Income
+dataset$river.distance..meters.), data=dataset)
